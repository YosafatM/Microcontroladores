
AVRASM ver. 2.1.30  C:\Users\yosaf\Desktop\Septimo\Micros\Practica14\Codigo\Debug\List\P14.asm Sun Oct 31 15:23:41 2021

C:\Users\yosaf\Desktop\Septimo\Micros\Practica14\Codigo\Debug\List\P14.asm(1412): warning: Register r5 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica14\Codigo\Debug\List\P14.asm(1413): warning: Register r4 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica14\Codigo\Debug\List\P14.asm(1414): warning: Register r7 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica14\Codigo\Debug\List\P14.asm(1415): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.46a Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _anterior_a=R5
                 	.DEF _anterior_b=R4
                 	.DEF _cantidad_a=R7
                 	.DEF _cantidad_b=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c019      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 
                 __GLOBAL_INI_TBL:
000016 0001      	.DW  0x01
000017 0002      	.DW  0x02
000018 002a      	.DW  __REG_BIT_VARS*2
                 
                 _0xFFFFFFFF:
000019 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001a 94f8      	CLI
00001b 27ee      	CLR  R30
00001c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001d e0f1      	LDI  R31,1
00001e bffb      	OUT  GICR,R31
00001f bfeb      	OUT  GICR,R30
000020 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000021 e08d      	LDI  R24,(14-2)+1
000022 e0a2      	LDI  R26,2
000023 27bb      	CLR  R27
                 __CLEAR_REG:
000024 93ed      	ST   X+,R30
000025 958a      	DEC  R24
000026 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000027 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000028 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000029 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002a 93ed      	ST   X+,R30
00002b 9701      	SBIW R24,1
00002c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002d e2ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00002f 9185      	LPM  R24,Z+
000030 9195      	LPM  R25,Z+
000031 9700      	SBIW R24,0
000032 f061      	BREQ __GLOBAL_INI_END
000033 91a5      	LPM  R26,Z+
000034 91b5      	LPM  R27,Z+
000035 9005      	LPM  R0,Z+
000036 9015      	LPM  R1,Z+
000037 01bf      	MOVW R22,R30
000038 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000039 9005      	LPM  R0,Z+
00003a 920d      	ST   X+,R0
00003b 9701      	SBIW R24,1
00003c f7e1      	BRNE __GLOBAL_INI_LOOP
00003d 01fb      	MOVW R30,R22
00003e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000040 bfed      	OUT  SPL,R30
000041 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000042 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000043 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000044 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000045 c039      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0028 ADMUX=adc_input | ADC_VREF_TYPE;
000046 931a      	ST   -Y,R17
000047 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
000048 2fe1      	MOV  R30,R17
000049 66e0      	ORI  R30,LOW(0x60)
00004a b9e7      	OUT  0x7,R30
                 ; 0000 0029 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002A delay_us(10);
                +
00004b e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00004c 958a     +DEC R24
00004d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 002B // Start the AD conversion
                 ; 0000 002C ADCSRA|=(1<<ADSC);
00004e 9a36      	SBI  0x6,6
                 ; 0000 002D // Wait for the AD conversion to complete
                 ; 0000 002E while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00004f 9b34      	SBIS 0x6,4
000050 cffe      	RJMP _0x3
                 ; 0000 002F ADCSRA|=(1<<ADIF);
000051 9a34      	SBI  0x6,4
                 ; 0000 0030 return ADCH;
000052 b1e5      	IN   R30,0x5
000053 9119      	LD   R17,Y+
000054 9508      	RET
                 ; 0000 0031 }
                 ; .FEND
                 ;unsigned char calcular_intensidad(unsigned char valor, unsigned char cantidad, char modo) {
                 ; 0000 0033 unsigned char calcular_intensidad(unsigned char valor, unsigned char cantidad, char modo) {
                 _calcular_intensidad:
                 ; .FSTART _calcular_intensidad
                 ; 0000 0034 char num_de_unos = valor / 31;
                 ; 0000 0035 unsigned char intensidad = 0;
                 ; 0000 0036 char i;
                 ; 0000 0037 
                 ; 0000 0038 num_de_unos = cantidad < num_de_unos ? num_de_unos - cantidad : 0;
000055 93aa      	ST   -Y,R26
000056 d09e      	RCALL __SAVELOCR6
000057 812f      	LDD  R18,Y+7
000058 8558      	LDD  R21,Y+8
                 ;	valor -> R21
                 ;	cantidad -> R18
                 ;	modo -> Y+6
                 ;	num_de_unos -> R17
                 ;	intensidad -> R16
                 ;	i -> R19
000059 85a8      	LDD  R26,Y+8
00005a e0b0      	LDI  R27,0
00005b e1ef      	LDI  R30,LOW(31)
00005c e0f0      	LDI  R31,HIGH(31)
00005d d0bc      	RCALL __DIVW21
00005e 2f1e      	MOV  R17,R30
00005f e000      	LDI  R16,0
000060 1721      	CP   R18,R17
000061 f440      	BRSH _0x6
000062 2fa1      	MOV  R26,R17
000063 27bb      	CLR  R27
000064 2fe2      	MOV  R30,R18
000065 e0f0      	LDI  R31,0
000066 d0c6      	RCALL __SWAPW12
000067 1bea      	SUB  R30,R26
000068 0bfb      	SBC  R31,R27
000069 c001      	RJMP _0x7
                 _0x6:
00006a e0e0      	LDI  R30,LOW(0)
                 _0x7:
00006b 2f1e      	MOV  R17,R30
                 ; 0000 0039 
                 ; 0000 003A for (i = 0; i < num_de_unos; i++) {
00006c e030      	LDI  R19,LOW(0)
                 _0xA:
00006d 1731      	CP   R19,R17
00006e f460      	BRSH _0xB
                 ; 0000 003B if (modo == 0) {
00006f 81ee      	LDD  R30,Y+6
000070 30e0      	CPI  R30,0
000071 f431      	BRNE _0xC
                 ; 0000 003C if (i == 0)
000072 3030      	CPI  R19,0
000073 f411      	BRNE _0xD
                 ; 0000 003D intensidad = (intensidad << 1) | 0x01;
000074 d070      	RCALL SUBOPT_0x0
                 ; 0000 003E else
000075 c001      	RJMP _0xE
                 _0xD:
                 ; 0000 003F intensidad = intensidad << 1;
000076 0f00      	LSL  R16
                 ; 0000 0040 } else { //Barra
                 _0xE:
000077 c001      	RJMP _0xF
                 _0xC:
                 ; 0000 0041 intensidad = (intensidad << 1) | 0x01;
000078 d06c      	RCALL SUBOPT_0x0
                 ; 0000 0042 }
                 _0xF:
                 ; 0000 0043 }
000079 5f3f      	SUBI R19,-1
00007a cff2      	RJMP _0xA
                 _0xB:
                 ; 0000 0044 
                 ; 0000 0045 return intensidad;
00007b 2fe0      	MOV  R30,R16
00007c d07f      	RCALL __LOADLOCR6
00007d 9629      	ADIW R28,9
00007e 9508      	RET
                 ; 0000 0046 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 004B {
                 _main:
                 ; .FSTART _main
                 ; 0000 004C // Declare your local variables here
                 ; 0000 004D 
                 ; 0000 004E // Input/Output Ports initialization
                 ; 0000 004F // Port A initialization
                 ; 0000 0050 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0051 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00007f e0e0      	LDI  R30,LOW(0)
000080 bbea      	OUT  0x1A,R30
                 ; 0000 0052 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0053 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000081 bbeb      	OUT  0x1B,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port B initialization
                 ; 0000 0056 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0057 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000082 efef      	LDI  R30,LOW(255)
000083 bbe7      	OUT  0x17,R30
                 ; 0000 0058 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0059 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000084 e0e0      	LDI  R30,LOW(0)
000085 bbe8      	OUT  0x18,R30
                 ; 0000 005A 
                 ; 0000 005B // Port C initialization
                 ; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000086 bbe4      	OUT  0x14,R30
                 ; 0000 005E // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 005F PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000087 efef      	LDI  R30,LOW(255)
000088 bbe5      	OUT  0x15,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port D initialization
                 ; 0000 0062 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0063 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000089 bbe1      	OUT  0x11,R30
                 ; 0000 0064 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0065 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008a e0e0      	LDI  R30,LOW(0)
00008b bbe2      	OUT  0x12,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 0 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer 0 Stopped
                 ; 0000 006A // Mode: Normal top=0xFF
                 ; 0000 006B // OC0 output: Disconnected
                 ; 0000 006C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008c bfe3      	OUT  0x33,R30
                 ; 0000 006D TCNT0=0x00;
00008d bfe2      	OUT  0x32,R30
                 ; 0000 006E OCR0=0x00;
00008e bfec      	OUT  0x3C,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 1 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: Timer1 Stopped
                 ; 0000 0073 // Mode: Normal top=0xFFFF
                 ; 0000 0074 // OC1A output: Disconnected
                 ; 0000 0075 // OC1B output: Disconnected
                 ; 0000 0076 // Noise Canceler: Off
                 ; 0000 0077 // Input Capture on Falling Edge
                 ; 0000 0078 // Timer1 Overflow Interrupt: Off
                 ; 0000 0079 // Input Capture Interrupt: Off
                 ; 0000 007A // Compare A Match Interrupt: Off
                 ; 0000 007B // Compare B Match Interrupt: Off
                 ; 0000 007C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00008f bdef      	OUT  0x2F,R30
                 ; 0000 007D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000090 bdee      	OUT  0x2E,R30
                 ; 0000 007E TCNT1H=0x00;
000091 bded      	OUT  0x2D,R30
                 ; 0000 007F TCNT1L=0x00;
000092 bdec      	OUT  0x2C,R30
                 ; 0000 0080 ICR1H=0x00;
000093 bde7      	OUT  0x27,R30
                 ; 0000 0081 ICR1L=0x00;
000094 bde6      	OUT  0x26,R30
                 ; 0000 0082 OCR1AH=0x00;
000095 bdeb      	OUT  0x2B,R30
                 ; 0000 0083 OCR1AL=0x00;
000096 bdea      	OUT  0x2A,R30
                 ; 0000 0084 OCR1BH=0x00;
000097 bde9      	OUT  0x29,R30
                 ; 0000 0085 OCR1BL=0x00;
000098 bde8      	OUT  0x28,R30
                 ; 0000 0086 
                 ; 0000 0087 // Timer/Counter 2 initialization
                 ; 0000 0088 // Clock source: System Clock
                 ; 0000 0089 // Clock value: Timer2 Stopped
                 ; 0000 008A // Mode: Normal top=0xFF
                 ; 0000 008B // OC2 output: Disconnected
                 ; 0000 008C ASSR=0<<AS2;
000099 bde2      	OUT  0x22,R30
                 ; 0000 008D TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00009a bde5      	OUT  0x25,R30
                 ; 0000 008E TCNT2=0x00;
00009b bde4      	OUT  0x24,R30
                 ; 0000 008F OCR2=0x00;
00009c bde3      	OUT  0x23,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0092 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00009d bfe9      	OUT  0x39,R30
                 ; 0000 0093 
                 ; 0000 0094 // External Interrupt(s) initialization
                 ; 0000 0095 // INT0: Off
                 ; 0000 0096 // INT1: Off
                 ; 0000 0097 // INT2: Off
                 ; 0000 0098 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00009e bfe5      	OUT  0x35,R30
                 ; 0000 0099 MCUCSR=(0<<ISC2);
00009f bfe4      	OUT  0x34,R30
                 ; 0000 009A 
                 ; 0000 009B // USART initialization
                 ; 0000 009C // USART disabled
                 ; 0000 009D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000a0 b9ea      	OUT  0xA,R30
                 ; 0000 009E 
                 ; 0000 009F // Analog Comparator initialization
                 ; 0000 00A0 // Analog Comparator: Off
                 ; 0000 00A1 // The Analog Comparator's positive input is
                 ; 0000 00A2 // connected to the AIN0 pin
                 ; 0000 00A3 // The Analog Comparator's negative input is
                 ; 0000 00A4 // connected to the AIN1 pin
                 ; 0000 00A5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a1 e8e0      	LDI  R30,LOW(128)
0000a2 b9e8      	OUT  0x8,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // ADC initialization
                 ; 0000 00A8 // ADC Clock frequency: 500.000 kHz
                 ; 0000 00A9 // ADC Voltage Reference: AVCC pin
                 ; 0000 00AA // ADC High Speed Mode: Off
                 ; 0000 00AB // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00AC // Only the 8 most significant bits of
                 ; 0000 00AD // the AD conversion result are used
                 ; 0000 00AE ADMUX=ADC_VREF_TYPE;
0000a3 e6e0      	LDI  R30,LOW(96)
0000a4 b9e7      	OUT  0x7,R30
                 ; 0000 00AF ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000a5 e8e1      	LDI  R30,LOW(129)
0000a6 b9e6      	OUT  0x6,R30
                 ; 0000 00B0 SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000a7 e1e0      	LDI  R30,LOW(16)
0000a8 bfe0      	OUT  0x30,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // SPI initialization
                 ; 0000 00B3 // SPI disabled
                 ; 0000 00B4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa b9ed      	OUT  0xD,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // TWI initialization
                 ; 0000 00B7 // TWI disabled
                 ; 0000 00B8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000ab bfe6      	OUT  0x36,R30
                 ; 0000 00B9 
                 ; 0000 00BA while (1)
                 _0x10:
                 ; 0000 00BB {
                 ; 0000 00BC unsigned char valor;
                 ; 0000 00BD unsigned char intensidad;
                 ; 0000 00BE unsigned char modo;
                 ; 0000 00BF 
                 ; 0000 00C0 modo = 0; //Barra
0000ac 9723      	SBIW R28,3
                 ;	valor -> Y+2
                 ;	intensidad -> Y+1
                 ;	modo -> Y+0
0000ad e0e0      	LDI  R30,LOW(0)
0000ae 83e8      	ST   Y,R30
                 ; 0000 00C1 if (!btn_punto) modo = 1;
0000af 999a      	SBIC 0x13,2
0000b0 c002      	RJMP _0x13
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 83e8      	ST   Y,R30
                 ; 0000 00C2 if (!btn_hold) modo = 2;
                 _0x13:
0000b3 9999      	SBIC 0x13,1
0000b4 c002      	RJMP _0x14
0000b5 e0e2      	LDI  R30,LOW(2)
0000b6 83e8      	ST   Y,R30
                 ; 0000 00C3 
                 ; 0000 00C4 if (saltar) {
                 _0x14:
0000b7 fe20      	SBRS R2,0
0000b8 c002      	RJMP _0x15
                 ; 0000 00C5 saltar = ~saltar;
0000b9 d030      	RCALL SUBOPT_0x1
                 ; 0000 00C6 delay_ms(30);
                 ; 0000 00C7 continue;
0000ba cff1      	RJMP _0x10
                 ; 0000 00C8 }
                 ; 0000 00C9 
                 ; 0000 00CA if (btn_tomar_a) {
                 _0x15:
0000bb 9b98      	SBIS 0x13,0
0000bc c013      	RJMP _0x16
                 ; 0000 00CB valor = read_adc(0);
0000bd e0a0      	LDI  R26,LOW(0)
0000be df87      	RCALL _read_adc
0000bf 83ea      	STD  Y+2,R30
                 ; 0000 00CC 
                 ; 0000 00CD if (valor == anterior_a) {
0000c0 81aa      	LDD  R26,Y+2
0000c1 165a      	CP   R5,R26
0000c2 f429      	BRNE _0x17
                 ; 0000 00CE if (cantidad_a < 8) cantidad_a++;
0000c3 e0e8      	LDI  R30,LOW(8)
0000c4 167e      	CP   R7,R30
0000c5 f408      	BRSH _0x18
0000c6 9473      	INC  R7
                 ; 0000 00CF } else
                 _0x18:
0000c7 c001      	RJMP _0x19
                 _0x17:
                 ; 0000 00D0 cantidad_a = 0;
0000c8 2477      	CLR  R7
                 ; 0000 00D1 
                 ; 0000 00D2 intensidad = calcular_intensidad(valor, cantidad_a, modo);
                 _0x19:
0000c9 81ea      	LDD  R30,Y+2
0000ca 93ea      	ST   -Y,R30
0000cb 927a      	ST   -Y,R7
0000cc d024      	RCALL SUBOPT_0x2
                 ; 0000 00D3 PORTB = intensidad;
0000cd bbe8      	OUT  0x18,R30
                 ; 0000 00D4 anterior_a = valor;
0000ce 805a      	LDD  R5,Y+2
                 ; 0000 00D5 } else {
0000cf c012      	RJMP _0x1A
                 _0x16:
                 ; 0000 00D6 valor = read_adc(1);
0000d0 e0a1      	LDI  R26,LOW(1)
0000d1 df74      	RCALL _read_adc
0000d2 83ea      	STD  Y+2,R30
                 ; 0000 00D7 
                 ; 0000 00D8 if (valor == anterior_b) {
0000d3 81aa      	LDD  R26,Y+2
0000d4 164a      	CP   R4,R26
0000d5 f429      	BRNE _0x1B
                 ; 0000 00D9 if (cantidad_b < 8) cantidad_b++;
0000d6 e0e8      	LDI  R30,LOW(8)
0000d7 166e      	CP   R6,R30
0000d8 f408      	BRSH _0x1C
0000d9 9463      	INC  R6
                 ; 0000 00DA } else
                 _0x1C:
0000da c001      	RJMP _0x1D
                 _0x1B:
                 ; 0000 00DB cantidad_b = 0;
0000db 2466      	CLR  R6
                 ; 0000 00DC 
                 ; 0000 00DD intensidad = calcular_intensidad(valor, cantidad_b, modo);
                 _0x1D:
0000dc 81ea      	LDD  R30,Y+2
0000dd 93ea      	ST   -Y,R30
0000de 926a      	ST   -Y,R6
0000df d011      	RCALL SUBOPT_0x2
                 ; 0000 00DE PORTD = intensidad;
0000e0 bbe2      	OUT  0x12,R30
                 ; 0000 00DF anterior_b = valor;
0000e1 804a      	LDD  R4,Y+2
                 ; 0000 00E0 }
                 _0x1A:
                 ; 0000 00E1 
                 ; 0000 00E2 saltar = ~saltar;
0000e2 d007      	RCALL SUBOPT_0x1
                 ; 0000 00E3 delay_ms(30);
                 ; 0000 00E4 }
0000e3 cfc8      	RJMP _0x10
                 ; 0000 00E5 }
                 _0x1E:
0000e4 cfff      	RJMP _0x1E
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0000e5 2fe0      	MOV  R30,R16
0000e6 0fee      	LSL  R30
0000e7 60e1      	ORI  R30,1
0000e8 2f0e      	MOV  R16,R30
0000e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0000ea e0e1      	LDI  R30,LOW(1)
0000eb 262e      	EOR  R2,R30
0000ec e1ae      	LDI  R26,LOW(30)
0000ed e0b0      	LDI  R27,0
0000ee d045      	RCALL _delay_ms
0000ef 9623      	ADIW R28,3
0000f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0000f1 81aa      	LDD  R26,Y+2
0000f2 df62      	RCALL _calcular_intensidad
0000f3 83e9      	STD  Y+1,R30
0000f4 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0000f5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0000f6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0000f7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0000f8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0000f9 931a      	ST   -Y,R17
0000fa 930a      	ST   -Y,R16
0000fb 9508      	RET
                 
                 __LOADLOCR6:
0000fc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0000fd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0000fe 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0000ff 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000100 8119      	LDD  R17,Y+1
000101 8108      	LD   R16,Y
000102 9508      	RET
                 
                 __ANEGW1:
000103 95f1      	NEG  R31
000104 95e1      	NEG  R30
000105 40f0      	SBCI R31,0
000106 9508      	RET
                 
                 __DIVW21U:
000107 2400      	CLR  R0
000108 2411      	CLR  R1
000109 e190      	LDI  R25,16
                 __DIVW21U1:
00010a 0faa      	LSL  R26
00010b 1fbb      	ROL  R27
00010c 1c00      	ROL  R0
00010d 1c11      	ROL  R1
00010e 1a0e      	SUB  R0,R30
00010f 0a1f      	SBC  R1,R31
000110 f418      	BRCC __DIVW21U2
000111 0e0e      	ADD  R0,R30
000112 1e1f      	ADC  R1,R31
000113 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000114 60a1      	SBR  R26,1
                 __DIVW21U3:
000115 959a      	DEC  R25
000116 f799      	BRNE __DIVW21U1
000117 01fd      	MOVW R30,R26
000118 01d0      	MOVW R26,R0
000119 9508      	RET
                 
                 __DIVW21:
00011a d004      	RCALL __CHKSIGNW
00011b dfeb      	RCALL __DIVW21U
00011c f40e      	BRTC __DIVW211
00011d dfe5      	RCALL __ANEGW1
                 __DIVW211:
00011e 9508      	RET
                 
                 __CHKSIGNW:
00011f 94e8      	CLT
000120 fff7      	SBRS R31,7
000121 c002      	RJMP __CHKSW1
000122 dfe0      	RCALL __ANEGW1
000123 9468      	SET
                 __CHKSW1:
000124 ffb7      	SBRS R27,7
000125 c006      	RJMP __CHKSW2
000126 95b1      	NEG  R27
000127 95a1      	NEG  R26
000128 40b0      	SBCI R27,0
000129 f800      	BLD  R0,0
00012a 9403      	INC  R0
00012b fa00      	BST  R0,0
                 __CHKSW2:
00012c 9508      	RET
                 
                 __SWAPW12:
00012d 2e1b      	MOV  R1,R27
00012e 2fbf      	MOV  R27,R31
00012f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000130 2e1a      	MOV  R1,R26
000131 2fae      	MOV  R26,R30
000132 2de1      	MOV  R30,R1
000133 9508      	RET
                 
                 _delay_ms:
000134 9610      	adiw r26,0
000135 f039      	breq __delay_ms1
                 __delay_ms0:
000136 95a8      	wdr
                +
000137 ef8a     +LDI R24 , LOW ( 0xFA )
000138 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000139 9701     +SBIW R24 , 1
00013a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00013b 9711      	sbiw r26,1
00013c f7c9      	brne __delay_ms0
                 __delay_ms1:
00013d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  12 r1 :   9 r2 :   2 r3 :   0 r4 :   2 r5 :   2 r6 :   4 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  11 r18:   5 r19:   6 r20:   2 r21:   3 r22:   2 r23:   0 
r24:  11 r25:   5 r26:  25 r27:  12 r28:   4 r29:   1 r30: 103 r31:  13 
x  :   3 y  :  36 z  :   7 
Registers used: 25 out of 35 (71.4%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   4 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   7 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :   0 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   3 ld    :   2 ldd   :  16 ldi   :  43 lds   :   0 lpm   :   7 
lsl   :   3 lsr   :   0 mov   :  15 movw  :   5 mul   :   0 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   2 out   :  44 
pop   :   0 push  :   0 rcall :  18 ret   :  13 reti  :   0 rjmp  :  41 
rol   :   3 ror   :   0 sbc   :   2 sbci  :   2 sbi   :   2 sbic  :   2 
sbis  :   2 sbiw  :   6 sbr   :   1 sbrc  :   0 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  18 std   :   3 
sts   :   0 sub   :   2 subi  :   1 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 47 out of 114 (41.2%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00027c    626     10    636    8192   7.8%
[.dseg] 0x000060 0x0000e0      0      0      0     512   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
