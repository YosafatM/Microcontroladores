
AVRASM ver. 2.1.30  C:\Users\yosaf\Desktop\Septimo\Micros\Proyecto2\Codigo1\Debug\List\proyecto2a.asm Sat Nov 13 19:08:53 2021

C:\Users\yosaf\Desktop\Septimo\Micros\Proyecto2\Codigo1\Debug\List\proyecto2a.asm(1412): warning: Register r5 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Proyecto2\Codigo1\Debug\List\proyecto2a.asm(1413): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.46a Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _read_index=R5
                 	.DEF _write_index=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01d      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000017 0002      	.DW  0x02
000018 0002      	.DW  0x02
000019 002a      	.DW  __REG_BIT_VARS*2
                 
00001a 0002      	.DW  0x02
00001b 0004      	.DW  0x04
00001c 002c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001e 94f8      	CLI
00001f 27ee      	CLR  R30
000020 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000021 e0f1      	LDI  R31,1
000022 bffb      	OUT  GICR,R31
000023 bfeb      	OUT  GICR,R30
000024 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000025 e08d      	LDI  R24,(14-2)+1
000026 e0a2      	LDI  R26,2
000027 27bb      	CLR  R27
                 __CLEAR_REG:
000028 93ed      	ST   X+,R30
000029 958a      	DEC  R24
00002a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002c e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002e 93ed      	ST   X+,R30
00002f 9701      	SBIW R24,1
000030 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000031 e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000032 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000033 9185      	LPM  R24,Z+
000034 9195      	LPM  R25,Z+
000035 9700      	SBIW R24,0
000036 f061      	BREQ __GLOBAL_INI_END
000037 91a5      	LPM  R26,Z+
000038 91b5      	LPM  R27,Z+
000039 9005      	LPM  R0,Z+
00003a 9015      	LPM  R1,Z+
00003b 01bf      	MOVW R22,R30
00003c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003d 9005      	LPM  R0,Z+
00003e 920d      	ST   X+,R0
00003f 9701      	SBIW R24,1
000040 f7e1      	BRNE __GLOBAL_INI_LOOP
000041 01fb      	MOVW R30,R22
000042 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000043 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000044 bfed      	OUT  SPL,R30
000045 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000046 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000047 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000048 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000049 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 002B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002C // Declare your local variables here
                 ; 0000 002D 
                 ; 0000 002E // Input/Output Ports initialization
                 ; 0000 002F // Port A initialization
                 ; 0000 0030 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0031 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00004a efef      	LDI  R30,LOW(255)
00004b bbea      	OUT  0x1A,R30
                 ; 0000 0032 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0033 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00004c d0fe      	RCALL SUBOPT_0x0
                 ; 0000 0034 
                 ; 0000 0035 // Port B initialization
                 ; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0037 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00004d e0e0      	LDI  R30,LOW(0)
00004e bbe7      	OUT  0x17,R30
                 ; 0000 0038 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0039 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
00004f efef      	LDI  R30,LOW(255)
000050 bbe8      	OUT  0x18,R30
                 ; 0000 003A 
                 ; 0000 003B // Port C initialization
                 ; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000051 e0e0      	LDI  R30,LOW(0)
000052 bbe4      	OUT  0x14,R30
                 ; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000053 bbe5      	OUT  0x15,R30
                 ; 0000 0040 
                 ; 0000 0041 // Port D initialization
                 ; 0000 0042 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0043 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000054 bbe1      	OUT  0x11,R30
                 ; 0000 0044 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0045 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000055 bbe2      	OUT  0x12,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 0 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock value: Timer 0 Stopped
                 ; 0000 004A // Mode: Normal top=0xFF
                 ; 0000 004B // OC0 output: Disconnected
                 ; 0000 004C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000056 bfe3      	OUT  0x33,R30
                 ; 0000 004D TCNT0=0x00;
000057 bfe2      	OUT  0x32,R30
                 ; 0000 004E OCR0=0x00;
000058 bfec      	OUT  0x3C,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 1 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer1 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFFFF
                 ; 0000 0054 // OC1A output: Disconnected
                 ; 0000 0055 // OC1B output: Disconnected
                 ; 0000 0056 // Noise Canceler: Off
                 ; 0000 0057 // Input Capture on Falling Edge
                 ; 0000 0058 // Timer1 Overflow Interrupt: Off
                 ; 0000 0059 // Input Capture Interrupt: Off
                 ; 0000 005A // Compare A Match Interrupt: Off
                 ; 0000 005B // Compare B Match Interrupt: Off
                 ; 0000 005C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000059 bdef      	OUT  0x2F,R30
                 ; 0000 005D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00005a bdee      	OUT  0x2E,R30
                 ; 0000 005E TCNT1H=0x00;
00005b bded      	OUT  0x2D,R30
                 ; 0000 005F TCNT1L=0x00;
00005c bdec      	OUT  0x2C,R30
                 ; 0000 0060 ICR1H=0x00;
00005d bde7      	OUT  0x27,R30
                 ; 0000 0061 ICR1L=0x00;
00005e bde6      	OUT  0x26,R30
                 ; 0000 0062 OCR1AH=0x00;
00005f bdeb      	OUT  0x2B,R30
                 ; 0000 0063 OCR1AL=0x00;
000060 bdea      	OUT  0x2A,R30
                 ; 0000 0064 OCR1BH=0x00;
000061 bde9      	OUT  0x29,R30
                 ; 0000 0065 OCR1BL=0x00;
000062 bde8      	OUT  0x28,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 2 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer2 Stopped
                 ; 0000 006A // Mode: Normal top=0xFF
                 ; 0000 006B // OC2 output: Disconnected
                 ; 0000 006C ASSR=0<<AS2;
000063 bde2      	OUT  0x22,R30
                 ; 0000 006D TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000064 bde5      	OUT  0x25,R30
                 ; 0000 006E TCNT2=0x00;
000065 bde4      	OUT  0x24,R30
                 ; 0000 006F OCR2=0x00;
000066 bde3      	OUT  0x23,R30
                 ; 0000 0070 
                 ; 0000 0071 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0072 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000067 bfe9      	OUT  0x39,R30
                 ; 0000 0073 
                 ; 0000 0074 // External Interrupt(s) initialization
                 ; 0000 0075 // INT0: Off
                 ; 0000 0076 // INT1: Off
                 ; 0000 0077 // INT2: Off
                 ; 0000 0078 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000068 bfe5      	OUT  0x35,R30
                 ; 0000 0079 MCUCSR=(0<<ISC2);
000069 bfe4      	OUT  0x34,R30
                 ; 0000 007A 
                 ; 0000 007B // USART initialization
                 ; 0000 007C // USART disabled
                 ; 0000 007D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00006a b9ea      	OUT  0xA,R30
                 ; 0000 007E 
                 ; 0000 007F // Analog Comparator initialization
                 ; 0000 0080 // Analog Comparator: Off
                 ; 0000 0081 // The Analog Comparator's positive input is
                 ; 0000 0082 // connected to the AIN0 pin
                 ; 0000 0083 // The Analog Comparator's negative input is
                 ; 0000 0084 // connected to the AIN1 pin
                 ; 0000 0085 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00006b e8e0      	LDI  R30,LOW(128)
00006c b9e8      	OUT  0x8,R30
                 ; 0000 0086 SFIOR=(0<<ACME);
00006d e0e0      	LDI  R30,LOW(0)
00006e bfe0      	OUT  0x30,R30
                 ; 0000 0087 
                 ; 0000 0088 // ADC initialization
                 ; 0000 0089 // ADC disabled
                 ; 0000 008A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00006f b9e6      	OUT  0x6,R30
                 ; 0000 008B 
                 ; 0000 008C // SPI initialization
                 ; 0000 008D // SPI disabled
                 ; 0000 008E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000070 b9ed      	OUT  0xD,R30
                 ; 0000 008F 
                 ; 0000 0090 // TWI initialization
                 ; 0000 0091 // TWI disabled
                 ; 0000 0092 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000071 bfe6      	OUT  0x36,R30
                 ; 0000 0093 
                 ; 0000 0094 while (1)
                 _0x3:
                 ; 0000 0095 {
                 ; 0000 0096 char current;
                 ; 0000 0097 char i;
                 ; 0000 0098 
                 ; 0000 0099 // Botones
                 ; 0000 009A a_clr = CLR;
000072 9722      	SBIW R28,2
                 ;	current -> Y+1
                 ;	i -> Y+0
000073 94e8      	CLT
000074 99b4      	SBIC 0x16,4
000075 9468      	SET
000076 f824      	BLD  R2,4
                 ; 0000 009B a_pau = PAU;
000077 94e8      	CLT
000078 99b5      	SBIC 0x16,5
000079 9468      	SET
00007a f825      	BLD  R2,5
                 ; 0000 009C a_go = GO;
00007b 94e8      	CLT
00007c 99b6      	SBIC 0x16,6
00007d 9468      	SET
00007e f826      	BLD  R2,6
                 ; 0000 009D 
                 ; 0000 009E if (p_clr == 1 && a_clr == 0) {
00007f fe33      	SBRS R3,3
000080 c002      	RJMP _0x7
000081 fe24      	SBRS R2,4
000082 c001      	RJMP _0x8
                 _0x7:
000083 c011      	RJMP _0x6
                 _0x8:
                 ; 0000 009F for (i=0; i<size; i++) inst[i] = 0;
000084 e0e0      	LDI  R30,LOW(0)
000085 83e8      	ST   Y,R30
                 _0xA:
000086 81a8      	LD   R26,Y
000087 27bb      	CLR  R27
000088 971a      	SBIW R26,10
000089 f444      	BRGE _0xB
00008a 81e8      	LD   R30,Y
00008b d0c2      	RCALL SUBOPT_0x1
00008c e0a0      	LDI  R26,LOW(0)
00008d 83a0      	STD  Z+0,R26
00008e 81e8      	LD   R30,Y
00008f 5fef      	SUBI R30,-LOW(1)
000090 83e8      	ST   Y,R30
000091 cff4      	RJMP _0xA
                 _0xB:
                 ; 0000 00A0 write_index = 0;
000092 2444      	CLR  R4
                 ; 0000 00A1 read_index = 0;
000093 2455      	CLR  R5
                 ; 0000 00A2 mode = 0;
000094 d0bd      	RCALL SUBOPT_0x2
                 ; 0000 00A3 delay_ms(20);
                 ; 0000 00A4 }
                 ; 0000 00A5 
                 ; 0000 00A6 if (p_pau == 1 && a_pau == 0) {
                 _0x6:
000095 fe34      	SBRS R3,4
000096 c002      	RJMP _0xD
000097 fe25      	SBRS R2,5
000098 c001      	RJMP _0xE
                 _0xD:
000099 c001      	RJMP _0xC
                 _0xE:
                 ; 0000 00A7 mode = 0;
00009a d0b7      	RCALL SUBOPT_0x2
                 ; 0000 00A8 delay_ms(20);
                 ; 0000 00A9 }
                 ; 0000 00AA 
                 ; 0000 00AB if (p_go == 1 && a_go == 0) {
                 _0xC:
00009b fe35      	SBRS R3,5
00009c c002      	RJMP _0x10
00009d fe26      	SBRS R2,6
00009e c001      	RJMP _0x11
                 _0x10:
00009f c003      	RJMP _0xF
                 _0x11:
                 ; 0000 00AC mode = 1;
0000a0 9468      	SET
0000a1 f836      	BLD  R3,6
                 ; 0000 00AD delay_ms(20);
0000a2 d0b4      	RCALL SUBOPT_0x3
                 ; 0000 00AE }
                 ; 0000 00AF 
                 ; 0000 00B0 if (p_clr == 0 && a_clr == 1) delay_ms(20);
                 _0xF:
0000a3 fc33      	SBRC R3,3
0000a4 c002      	RJMP _0x13
0000a5 fc24      	SBRC R2,4
0000a6 c001      	RJMP _0x14
                 _0x13:
0000a7 c001      	RJMP _0x12
                 _0x14:
0000a8 d0ae      	RCALL SUBOPT_0x3
                 ; 0000 00B1 if (p_pau == 0 && a_pau == 1) delay_ms(20);
                 _0x12:
0000a9 fc34      	SBRC R3,4
0000aa c002      	RJMP _0x16
0000ab fc25      	SBRC R2,5
0000ac c001      	RJMP _0x17
                 _0x16:
0000ad c001      	RJMP _0x15
                 _0x17:
0000ae d0a8      	RCALL SUBOPT_0x3
                 ; 0000 00B2 if (p_go == 0 && a_go == 1) delay_ms(20);
                 _0x15:
0000af fc35      	SBRC R3,5
0000b0 c002      	RJMP _0x19
0000b1 fc26      	SBRC R2,6
0000b2 c001      	RJMP _0x1A
                 _0x19:
0000b3 c001      	RJMP _0x18
                 _0x1A:
0000b4 d0a2      	RCALL SUBOPT_0x3
                 ; 0000 00B3 
                 ; 0000 00B4 // Instrucciones: grabar y leer
                 ; 0000 00B5 if (mode == 0 && write_index < size) { // Puede grabar
                 _0x18:
0000b5 fc36      	SBRC R3,6
0000b6 c004      	RJMP _0x1C
0000b7 2da4      	MOV  R26,R4
0000b8 27bb      	CLR  R27
0000b9 971a      	SBIW R26,10
0000ba f00c      	BRLT _0x1D
                 _0x1C:
0000bb c049      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00B6 a_izq = IZQ;
0000bc 94e8      	CLT
0000bd 99b0      	SBIC 0x16,0
0000be 9468      	SET
0000bf f820      	BLD  R2,0
                 ; 0000 00B7 a_der = DER;
0000c0 94e8      	CLT
0000c1 99b1      	SBIC 0x16,1
0000c2 9468      	SET
0000c3 f821      	BLD  R2,1
                 ; 0000 00B8 a_arr = ARR;
0000c4 94e8      	CLT
0000c5 99b2      	SBIC 0x16,2
0000c6 9468      	SET
0000c7 f822      	BLD  R2,2
                 ; 0000 00B9 a_aba = ABA;
0000c8 94e8      	CLT
0000c9 99b3      	SBIC 0x16,3
0000ca 9468      	SET
0000cb f823      	BLD  R2,3
                 ; 0000 00BA 
                 ; 0000 00BB if (p_izq == 1 && a_izq == 0) {
0000cc fe27      	SBRS R2,7
0000cd c002      	RJMP _0x1F
0000ce fe20      	SBRS R2,0
0000cf c001      	RJMP _0x20
                 _0x1F:
0000d0 c003      	RJMP _0x1E
                 _0x20:
                 ; 0000 00BC inst[write_index] = 1;
0000d1 d088      	RCALL SUBOPT_0x4
0000d2 e0a1      	LDI  R26,LOW(1)
0000d3 d088      	RCALL SUBOPT_0x5
                 ; 0000 00BD write_index++;
                 ; 0000 00BE delay_ms(20);
                 ; 0000 00BF }
                 ; 0000 00C0 
                 ; 0000 00C1 if (p_der == 1 && a_der == 0) {
                 _0x1E:
0000d4 fe30      	SBRS R3,0
0000d5 c002      	RJMP _0x22
0000d6 fe21      	SBRS R2,1
0000d7 c001      	RJMP _0x23
                 _0x22:
0000d8 c003      	RJMP _0x21
                 _0x23:
                 ; 0000 00C2 inst[write_index] = 2;
0000d9 d080      	RCALL SUBOPT_0x4
0000da e0a2      	LDI  R26,LOW(2)
0000db d080      	RCALL SUBOPT_0x5
                 ; 0000 00C3 write_index++;
                 ; 0000 00C4 delay_ms(20);
                 ; 0000 00C5 }
                 ; 0000 00C6 
                 ; 0000 00C7 if (p_arr == 1 && a_arr == 0) {
                 _0x21:
0000dc fe31      	SBRS R3,1
0000dd c002      	RJMP _0x25
0000de fe22      	SBRS R2,2
0000df c001      	RJMP _0x26
                 _0x25:
0000e0 c003      	RJMP _0x24
                 _0x26:
                 ; 0000 00C8 inst[write_index] = 3;
0000e1 d078      	RCALL SUBOPT_0x4
0000e2 e0a3      	LDI  R26,LOW(3)
0000e3 d078      	RCALL SUBOPT_0x5
                 ; 0000 00C9 write_index++;
                 ; 0000 00CA delay_ms(20);
                 ; 0000 00CB }
                 ; 0000 00CC 
                 ; 0000 00CD if (p_aba == 1 && a_aba == 0) {
                 _0x24:
0000e4 fe32      	SBRS R3,2
0000e5 c002      	RJMP _0x28
0000e6 fe23      	SBRS R2,3
0000e7 c001      	RJMP _0x29
                 _0x28:
0000e8 c003      	RJMP _0x27
                 _0x29:
                 ; 0000 00CE inst[write_index] = 4;
0000e9 d070      	RCALL SUBOPT_0x4
0000ea e0a4      	LDI  R26,LOW(4)
0000eb d070      	RCALL SUBOPT_0x5
                 ; 0000 00CF write_index++;
                 ; 0000 00D0 delay_ms(20);
                 ; 0000 00D1 }
                 ; 0000 00D2 
                 ; 0000 00D3 if (p_izq == 0 && a_izq == 1) delay_ms(20);
                 _0x27:
0000ec fc27      	SBRC R2,7
0000ed c002      	RJMP _0x2B
0000ee fc20      	SBRC R2,0
0000ef c001      	RJMP _0x2C
                 _0x2B:
0000f0 c001      	RJMP _0x2A
                 _0x2C:
0000f1 d065      	RCALL SUBOPT_0x3
                 ; 0000 00D4 if (p_der == 0 && a_der == 1) delay_ms(20);
                 _0x2A:
0000f2 fc30      	SBRC R3,0
0000f3 c002      	RJMP _0x2E
0000f4 fc21      	SBRC R2,1
0000f5 c001      	RJMP _0x2F
                 _0x2E:
0000f6 c001      	RJMP _0x2D
                 _0x2F:
0000f7 d05f      	RCALL SUBOPT_0x3
                 ; 0000 00D5 if (p_arr == 0 && a_arr == 1) delay_ms(20);
                 _0x2D:
0000f8 fc31      	SBRC R3,1
0000f9 c002      	RJMP _0x31
0000fa fc22      	SBRC R2,2
0000fb c001      	RJMP _0x32
                 _0x31:
0000fc c001      	RJMP _0x30
                 _0x32:
0000fd d059      	RCALL SUBOPT_0x3
                 ; 0000 00D6 if (p_aba == 0 && a_aba == 1) delay_ms(20);
                 _0x30:
0000fe fc32      	SBRC R3,2
0000ff c002      	RJMP _0x34
000100 fc23      	SBRC R2,3
000101 c001      	RJMP _0x35
                 _0x34:
000102 c001      	RJMP _0x33
                 _0x35:
000103 d053      	RCALL SUBOPT_0x3
                 ; 0000 00D7 } else if (mode == 1 && read_index < size) {
                 _0x33:
000104 c035      	RJMP _0x36
                 _0x1B:
000105 fe36      	SBRS R3,6
000106 c004      	RJMP _0x38
000107 2da5      	MOV  R26,R5
000108 27bb      	CLR  R27
000109 971a      	SBIW R26,10
00010a f00c      	BRLT _0x39
                 _0x38:
00010b c02e      	RJMP _0x37
                 _0x39:
                 ; 0000 00D8 current = inst[read_index];
00010c 2de5      	MOV  R30,R5
00010d d040      	RCALL SUBOPT_0x1
00010e 81e0      	LD   R30,Z
00010f 83e9      	STD  Y+1,R30
                 ; 0000 00D9 read_index++;
000110 9453      	INC  R5
                 ; 0000 00DA 
                 ; 0000 00DB switch (current) {
000111 e0f0      	LDI  R31,0
                 ; 0000 00DC case 1: // Derecha
000112 30e1      	CPI  R30,LOW(0x1)
000113 e0a0      	LDI  R26,HIGH(0x1)
000114 07fa      	CPC  R31,R26
000115 f431      	BRNE _0x3D
                 ; 0000 00DD PORTA = 0xff;
000116 d048      	RCALL SUBOPT_0x6
                 ; 0000 00DE delay_ms(50);
000117 e3a2      	LDI  R26,LOW(50)
000118 d049      	RCALL SUBOPT_0x7
                 ; 0000 00DF PORTA = 0x00;
                 ; 0000 00E0 delay_ms(450);
000119 eca2      	LDI  R26,LOW(450)
00011a e0b1      	LDI  R27,HIGH(450)
00011b c01d      	RJMP _0x42
                 ; 0000 00E1 break;
                 ; 0000 00E2 
                 ; 0000 00E3 case 2: // Izquierda
                 _0x3D:
00011c 30e2      	CPI  R30,LOW(0x2)
00011d e0a0      	LDI  R26,HIGH(0x2)
00011e 07fa      	CPC  R31,R26
00011f f431      	BRNE _0x3E
                 ; 0000 00E4 PORTA = 0xff;
000120 d03e      	RCALL SUBOPT_0x6
                 ; 0000 00E5 delay_ms(25);
000121 e1a9      	LDI  R26,LOW(25)
000122 d03f      	RCALL SUBOPT_0x7
                 ; 0000 00E6 PORTA = 0x00;
                 ; 0000 00E7 delay_ms(475);
000123 edab      	LDI  R26,LOW(475)
000124 e0b1      	LDI  R27,HIGH(475)
000125 c013      	RJMP _0x42
                 ; 0000 00E8 break;
                 ; 0000 00E9 
                 ; 0000 00EA case 3: // Arriba
                 _0x3E:
000126 30e3      	CPI  R30,LOW(0x3)
000127 e0a0      	LDI  R26,HIGH(0x3)
000128 07fa      	CPC  R31,R26
000129 f431      	BRNE _0x3F
                 ; 0000 00EB PORTA = 0xff;
00012a d034      	RCALL SUBOPT_0x6
                 ; 0000 00EC delay_ms(75);
00012b e4ab      	LDI  R26,LOW(75)
00012c d035      	RCALL SUBOPT_0x7
                 ; 0000 00ED PORTA = 0x00;
                 ; 0000 00EE delay_ms(425);
00012d eaa9      	LDI  R26,LOW(425)
00012e e0b1      	LDI  R27,HIGH(425)
00012f c009      	RJMP _0x42
                 ; 0000 00EF break;
                 ; 0000 00F0 
                 ; 0000 00F1 case 4: // Abajo
                 _0x3F:
000130 30e4      	CPI  R30,LOW(0x4)
000131 e0a0      	LDI  R26,HIGH(0x4)
000132 07fa      	CPC  R31,R26
000133 f431      	BRNE _0x3C
                 ; 0000 00F2 PORTA = 0xff;
000134 d02a      	RCALL SUBOPT_0x6
                 ; 0000 00F3 delay_ms(100);
000135 e6a4      	LDI  R26,LOW(100)
000136 d02b      	RCALL SUBOPT_0x7
                 ; 0000 00F4 PORTA = 0x00;
                 ; 0000 00F5 delay_ms(400);
000137 e9a0      	LDI  R26,LOW(400)
000138 e0b1      	LDI  R27,HIGH(400)
                 _0x42:
000139 d02b      	RCALL _delay_ms
                 ; 0000 00F6 break;
                 ; 0000 00F7 }
                 _0x3C:
                 ; 0000 00F8 }
                 ; 0000 00F9 
                 ; 0000 00FA p_izq = a_izq;
                 _0x37:
                 _0x36:
00013a fa20      	BST  R2,0
00013b f827      	BLD  R2,7
                 ; 0000 00FB p_der = a_der;
00013c fa21      	BST  R2,1
00013d f830      	BLD  R3,0
                 ; 0000 00FC p_arr = a_arr;
00013e fa22      	BST  R2,2
00013f f831      	BLD  R3,1
                 ; 0000 00FD p_aba = a_aba;
000140 fa23      	BST  R2,3
000141 f832      	BLD  R3,2
                 ; 0000 00FE p_clr = a_clr;
000142 fa24      	BST  R2,4
000143 f833      	BLD  R3,3
                 ; 0000 00FF p_pau = a_pau;
000144 fa25      	BST  R2,5
000145 f834      	BLD  R3,4
                 ; 0000 0100 p_go = a_go;
000146 fa26      	BST  R2,6
000147 f835      	BLD  R3,5
                 ; 0000 0101 }
000148 9622      	ADIW R28,2
000149 cf28      	RJMP _0x3
                 ; 0000 0102 }
                 _0x41:
00014a cfff      	RJMP _0x41
                 ; .FEND
                 
                 	.DSEG
                 _inst:
0000e0           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00014b e0e0      	LDI  R30,LOW(0)
00014c bbeb      	OUT  0x1B,R30
00014d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00014e e0f0      	LDI  R31,0
00014f 52e0      	SUBI R30,LOW(-_inst)
000150 4fff      	SBCI R31,HIGH(-_inst)
000151 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000152 94e8      	CLT
000153 f836      	BLD  R3,6
000154 e1a4      	LDI  R26,LOW(20)
000155 e0b0      	LDI  R27,0
000156 c00e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3:
000157 e1a4      	LDI  R26,LOW(20)
000158 e0b0      	LDI  R27,0
000159 c00b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00015a 2de4      	MOV  R30,R4
00015b cff2      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00015c 83a0      	STD  Z+0,R26
00015d 9443      	INC  R4
00015e cff8      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00015f efef      	LDI  R30,LOW(255)
000160 bbeb      	OUT  0x1B,R30
000161 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000162 e0b0      	LDI  R27,0
000163 d001      	RCALL _delay_ms
000164 cfe6      	RJMP SUBOPT_0x0
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
000165 9610      	adiw r26,0
000166 f039      	breq __delay_ms1
                 __delay_ms0:
000167 95a8      	wdr
                +
000168 ef8a     +LDI R24 , LOW ( 0xFA )
000169 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00016a 9701     +SBIW R24 , 1
00016b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00016c 9711      	sbiw r26,1
00016d f7c9      	brne __delay_ms0
                 __delay_ms1:
00016e 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   4 r1 :   1 r2 :  31 r3 :  22 r4 :   4 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  36 r27:  12 r28:   3 r29:   1 r30:  72 r31:  10 
x  :   3 y  :   6 z  :  10 
Registers used: 18 out of 35 (51.4%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  16 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   2 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   7 
cls   :   0 clt   :   8 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   4 cpi   :   4 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   2 ld    :   4 ldd   :   0 ldi   :  51 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   4 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  41 
pop   :   0 push  :   0 rcall :  31 ret   :   4 reti  :   0 rjmp  :  81 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 sbi   :   0 sbic  :   7 
sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :  15 sbrs  :  15 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   8 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :   3 
sts   :   0 sub   :   0 subi  :   2 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 33 out of 114 (28.9%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002de    716     18    734    8192   9.0%
[.dseg] 0x000060 0x0000ea      0     10     10     512   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
