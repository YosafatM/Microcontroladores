
AVRASM ver. 2.1.30  C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm Sat Dec 04 15:12:56 2021

C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1412): warning: Register r5 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1413): warning: Register r4 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1414): warning: Register r7 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1415): warning: Register r6 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1416): warning: Register r9 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1417): warning: Register r8 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1418): warning: Register r11 already defined by the .DEF directive
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1419): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.46a Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _modo=R5
                 	.DEF _columnas=R4
                 	.DEF _filas=R7
                 	.DEF _indice=R6
                 	.DEF _numero=R9
                 	.DEF _repetir=R8
                 	.DEF _renglon=R11
                 	.DEF _cambio_caso=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c058      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0401
000017 0000      	.DB  0x1,0x4,0x0,0x0
000018 0000
000019 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00001a ffff
00001b ffff
00001c ffff
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1460): warning: .cseg .db misalignment - padding zero byte
00001d 00ff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x4:
00001e 0101
00001f 0101
000020 0201
000021 0202      	.DB  0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x2
000022 0202
000023 0404
000024 0404
000025 0804      	.DB  0x2,0x2,0x4,0x4,0x4,0x4,0x4,0x8
000026 0808
000027 0808
000028 1010
000029 1010      	.DB  0x8,0x8,0x8,0x8,0x10,0x10,0x10,0x10
00002a 2010
00002b 2020
00002c 2020
00002d 4040      	.DB  0x10,0x20,0x20,0x20,0x20,0x20,0x40,0x40
00002e 4040
C:\Users\yosaf\Desktop\Septimo\Micros\Practica17\Codigo\Debug\List\P17.asm(1466): warning: .cseg .db misalignment - padding zero byte
00002f 0040      	.DB  0x40,0x40,0x40
                 _0x5:
000030 2e41
000031 3a36
000032 3f41
000033 003d      	.DB  0x41,0x2E,0x36,0x3A,0x41,0x3F,0x3D,0x0
000034 3f3f
000035 1e3d
000036 362e
000037 5d39      	.DB  0x3F,0x3F,0x3D,0x1E,0x2E,0x36,0x39,0x5D
000038 363e
000039 4936
00003a 6b67
00003b 006d      	.DB  0x3E,0x36,0x36,0x49,0x67,0x6B,0x6D,0x0
00003c 587f
00003d 3a3a
00003e 463a
00003f 3543      	.DB  0x7F,0x58,0x3A,0x3A,0x3A,0x46,0x43,0x35
000040 3636
000041 7c4f
000042 0e7e
000043 7876      	.DB  0x36,0x36,0x4F,0x7C,0x7E,0xE,0x76,0x78
000044 3649
000045 3636
000046 7949
000047 3636      	.DB  0x49,0x36,0x36,0x36,0x49,0x79,0x36,0x36
000048 6956      	.DB  0x56,0x69
                 
                 __GLOBAL_INI_TBL:
000049 0001      	.DW  0x01
00004a 0002      	.DW  0x02
00004b 002a      	.DW  __REG_BIT_VARS*2
                 
00004c 0008      	.DW  0x08
00004d 0004      	.DW  0x04
00004e 002c      	.DW  __REG_VARS*2
                 
00004f 0007      	.DW  0x07
000050 00e0      	.DW  _modoCero
000051 0034      	.DW  _0x3*2
                 
000052 0023      	.DW  0x23
000053 00e7      	.DW  _modoUno
000054 003c      	.DW  _0x4*2
                 
000055 0032      	.DW  0x32
000056 010a      	.DW  _modoCuatro
000057 0060      	.DW  _0x5*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bffb      	OUT  GICR,R31
00005e bfeb      	OUT  GICR,R30
00005f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 c00f      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void cambiar_modo(){
                 ; 0000 003C void cambiar_modo(){
                 
                 	.CSEG
                 _cambiar_modo:
                 ; .FSTART _cambiar_modo
                 ; 0000 003D cambio_caso = 0;
000085 24aa      	CLR  R10
                 ; 0000 003E indice = 0;
000086 2466      	CLR  R6
                 ; 0000 003F renglon = 0;
000087 24bb      	CLR  R11
                 ; 0000 0040 numero = 0;
000088 2499      	CLR  R9
                 ; 0000 0041 repetir = 0;
000089 2488      	CLR  R8
                 ; 0000 0042 columnas = 0x01;
00008a e0e1      	LDI  R30,LOW(1)
00008b 2e4e      	MOV  R4,R30
                 ; 0000 0043 modo++;
00008c 9453      	INC  R5
                 ; 0000 0044 puede_cambiar = 0;
00008d 94e8      	CLT
00008e f820      	BLD  R2,0
                 ; 0000 0045 if (modo == 5) modo = 0;
00008f e0e5      	LDI  R30,LOW(5)
000090 15e5      	CP   R30,R5
000091 f409      	BRNE _0x6
000092 2455      	CLR  R5
                 ; 0000 0046 }
                 _0x6:
000093 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0049 {
                 _main:
                 ; .FSTART _main
                 ; 0000 004A // Declare your local variables here
                 ; 0000 004B 
                 ; 0000 004C // Input/Output Ports initialization
                 ; 0000 004D // Port A initialization
                 ; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000094 e0e0      	LDI  R30,LOW(0)
000095 bbea      	OUT  0x1A,R30
                 ; 0000 0050 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0051 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000096 efef      	LDI  R30,LOW(255)
000097 bbeb      	OUT  0x1B,R30
                 ; 0000 0052 
                 ; 0000 0053 // Port B initialization
                 ; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0055 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000098 e0e0      	LDI  R30,LOW(0)
000099 bbe7      	OUT  0x17,R30
                 ; 0000 0056 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0057 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
00009a efef      	LDI  R30,LOW(255)
00009b bbe8      	OUT  0x18,R30
                 ; 0000 0058 
                 ; 0000 0059 // Port C initialization
                 ; 0000 005A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005B DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00009c bbe4      	OUT  0x14,R30
                 ; 0000 005C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009d e0e0      	LDI  R30,LOW(0)
00009e bbe5      	OUT  0x15,R30
                 ; 0000 005E 
                 ; 0000 005F // Port D initialization
                 ; 0000 0060 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0061 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00009f efef      	LDI  R30,LOW(255)
0000a0 bbe1      	OUT  0x11,R30
                 ; 0000 0062 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0063 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bbe2      	OUT  0x12,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer/Counter 0 initialization
                 ; 0000 0066 // Clock source: System Clock
                 ; 0000 0067 // Clock value: Timer 0 Stopped
                 ; 0000 0068 // Mode: Normal top=0xFF
                 ; 0000 0069 // OC0 output: Disconnected
                 ; 0000 006A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a3 bfe3      	OUT  0x33,R30
                 ; 0000 006B TCNT0=0x00;
0000a4 bfe2      	OUT  0x32,R30
                 ; 0000 006C OCR0=0x00;
0000a5 bfec      	OUT  0x3C,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 1 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer1 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFFFF
                 ; 0000 0072 // OC1A output: Disconnected
                 ; 0000 0073 // OC1B output: Disconnected
                 ; 0000 0074 // Noise Canceler: Off
                 ; 0000 0075 // Input Capture on Falling Edge
                 ; 0000 0076 // Timer1 Overflow Interrupt: Off
                 ; 0000 0077 // Input Capture Interrupt: Off
                 ; 0000 0078 // Compare A Match Interrupt: Off
                 ; 0000 0079 // Compare B Match Interrupt: Off
                 ; 0000 007A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a6 bdef      	OUT  0x2F,R30
                 ; 0000 007B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a7 bdee      	OUT  0x2E,R30
                 ; 0000 007C TCNT1H=0x00;
0000a8 bded      	OUT  0x2D,R30
                 ; 0000 007D TCNT1L=0x00;
0000a9 bdec      	OUT  0x2C,R30
                 ; 0000 007E ICR1H=0x00;
0000aa bde7      	OUT  0x27,R30
                 ; 0000 007F ICR1L=0x00;
0000ab bde6      	OUT  0x26,R30
                 ; 0000 0080 OCR1AH=0x00;
0000ac bdeb      	OUT  0x2B,R30
                 ; 0000 0081 OCR1AL=0x00;
0000ad bdea      	OUT  0x2A,R30
                 ; 0000 0082 OCR1BH=0x00;
0000ae bde9      	OUT  0x29,R30
                 ; 0000 0083 OCR1BL=0x00;
0000af bde8      	OUT  0x28,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer/Counter 2 initialization
                 ; 0000 0086 // Clock source: System Clock
                 ; 0000 0087 // Clock value: Timer2 Stopped
                 ; 0000 0088 // Mode: Normal top=0xFF
                 ; 0000 0089 // OC2 output: Disconnected
                 ; 0000 008A ASSR=0<<AS2;
0000b0 bde2      	OUT  0x22,R30
                 ; 0000 008B TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000b1 bde5      	OUT  0x25,R30
                 ; 0000 008C TCNT2=0x00;
0000b2 bde4      	OUT  0x24,R30
                 ; 0000 008D OCR2=0x00;
0000b3 bde3      	OUT  0x23,R30
                 ; 0000 008E 
                 ; 0000 008F // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0090 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000b4 bfe9      	OUT  0x39,R30
                 ; 0000 0091 
                 ; 0000 0092 // External Interrupt(s) initialization
                 ; 0000 0093 // INT0: Off
                 ; 0000 0094 // INT1: Off
                 ; 0000 0095 // INT2: Off
                 ; 0000 0096 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b5 bfe5      	OUT  0x35,R30
                 ; 0000 0097 MCUCSR=(0<<ISC2);
0000b6 bfe4      	OUT  0x34,R30
                 ; 0000 0098 
                 ; 0000 0099 // USART initialization
                 ; 0000 009A // USART disabled
                 ; 0000 009B UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000b7 b9ea      	OUT  0xA,R30
                 ; 0000 009C 
                 ; 0000 009D // Analog Comparator initialization
                 ; 0000 009E // Analog Comparator: Off
                 ; 0000 009F // The Analog Comparator's positive input is
                 ; 0000 00A0 // connected to the AIN0 pin
                 ; 0000 00A1 // The Analog Comparator's negative input is
                 ; 0000 00A2 // connected to the AIN1 pin
                 ; 0000 00A3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b8 e8e0      	LDI  R30,LOW(128)
0000b9 b9e8      	OUT  0x8,R30
                 ; 0000 00A4 SFIOR=(0<<ACME);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bfe0      	OUT  0x30,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // ADC initialization
                 ; 0000 00A7 // ADC disabled
                 ; 0000 00A8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000bc b9e6      	OUT  0x6,R30
                 ; 0000 00A9 
                 ; 0000 00AA // SPI initialization
                 ; 0000 00AB // SPI disabled
                 ; 0000 00AC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000bd b9ed      	OUT  0xD,R30
                 ; 0000 00AD 
                 ; 0000 00AE // TWI initialization
                 ; 0000 00AF // TWI disabled
                 ; 0000 00B0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000be bfe6      	OUT  0x36,R30
                 ; 0000 00B1 
                 ; 0000 00B2 while (1)
                 _0x7:
                 ; 0000 00B3 {
                 ; 0000 00B4 switch (modo){
0000bf 2de5      	MOV  R30,R5
0000c0 e0f0      	LDI  R31,0
                 ; 0000 00B5 case 0:
0000c1 9730      	SBIW R30,0
0000c2 f451      	BRNE _0xD
                 ; 0000 00B6 filas = ~modoCero[indice];
0000c3 2de6      	MOV  R30,R6
0000c4 e0f0      	LDI  R31,0
0000c5 52e0      	SUBI R30,LOW(-_modoCero)
0000c6 4fff      	SBCI R31,HIGH(-_modoCero)
0000c7 81e0      	LD   R30,Z
0000c8 d08c      	RCALL SUBOPT_0x0
                 ; 0000 00B7 delay_ms(100);
0000c9 e6a4      	LDI  R26,LOW(100)
0000ca e0b0      	LDI  R27,0
0000cb d0a0      	RCALL _delay_ms
                 ; 0000 00B8 break;
0000cc c041      	RJMP _0xC
                 ; 0000 00B9 
                 ; 0000 00BA case 1:
                 _0xD:
0000cd d08a      	RCALL SUBOPT_0x1
0000ce f461      	BRNE _0xE
                 ; 0000 00BB filas = ~modoUno[renglon][indice];
0000cf d08c      	RCALL SUBOPT_0x2
                 ; 0000 00BC repetir++;
0000d0 9483      	INC  R8
                 ; 0000 00BD if (repetir == 5){
0000d1 e0e5      	LDI  R30,LOW(5)
0000d2 15e8      	CP   R30,R8
0000d3 f411      	BRNE _0xF
                 ; 0000 00BE renglon++;
0000d4 94b3      	INC  R11
                 ; 0000 00BF repetir = 0;
0000d5 2488      	CLR  R8
                 ; 0000 00C0 }
                 ; 0000 00C1 
                 ; 0000 00C2 if (renglon == 7) renglon = 0;
                 _0xF:
0000d6 e0e7      	LDI  R30,LOW(7)
0000d7 15eb      	CP   R30,R11
0000d8 f409      	BRNE _0x10
0000d9 24bb      	CLR  R11
                 ; 0000 00C3 break;
                 _0x10:
0000da c033      	RJMP _0xC
                 ; 0000 00C4 
                 ; 0000 00C5 case 2:
                 _0xE:
0000db d08c      	RCALL SUBOPT_0x3
0000dc f439      	BRNE _0x11
                 ; 0000 00C6 filas = ~modoUno[renglon][indice];
0000dd d07e      	RCALL SUBOPT_0x2
                 ; 0000 00C7 renglon++;
0000de 94b3      	INC  R11
                 ; 0000 00C8 if (renglon == 7) renglon = 0;
0000df e0e7      	LDI  R30,LOW(7)
0000e0 15eb      	CP   R30,R11
0000e1 f409      	BRNE _0x12
0000e2 24bb      	CLR  R11
                 ; 0000 00C9 break;
                 _0x12:
0000e3 c02a      	RJMP _0xC
                 ; 0000 00CA 
                 ; 0000 00CB case 3:
                 _0x11:
0000e4 30e3      	CPI  R30,LOW(0x3)
0000e5 e0a0      	LDI  R26,HIGH(0x3)
0000e6 07fa      	CPC  R31,R26
0000e7 f479      	BRNE _0x16
                 ; 0000 00CC filas = ~modoUno[renglon][indice];
0000e8 d073      	RCALL SUBOPT_0x2
                 ; 0000 00CD delay_ms(100);
0000e9 e6a4      	LDI  R26,LOW(100)
0000ea e0b0      	LDI  R27,0
0000eb d080      	RCALL _delay_ms
                 ; 0000 00CE repetir++;
0000ec 9483      	INC  R8
                 ; 0000 00CF if (repetir == 5){
0000ed e0e5      	LDI  R30,LOW(5)
0000ee 15e8      	CP   R30,R8
0000ef f411      	BRNE _0x14
                 ; 0000 00D0 renglon++;
0000f0 94b3      	INC  R11
                 ; 0000 00D1 repetir = 0;
0000f1 2488      	CLR  R8
                 ; 0000 00D2 }
                 ; 0000 00D3 
                 ; 0000 00D4 if (renglon == 7) renglon = 0;
                 _0x14:
0000f2 e0e7      	LDI  R30,LOW(7)
0000f3 15eb      	CP   R30,R11
0000f4 f409      	BRNE _0x15
0000f5 24bb      	CLR  R11
                 ; 0000 00D5 break;
                 _0x15:
0000f6 c017      	RJMP _0xC
                 ; 0000 00D6 
                 ; 0000 00D7 default:
                 _0x16:
                 ; 0000 00D8 filas = modoCuatro[numero][indice];
0000f7 2de9      	MOV  R30,R9
0000f8 e0a5      	LDI  R26,LOW(5)
0000f9 9fea      	MUL  R30,R26
0000fa 01f0      	MOVW R30,R0
0000fb 5fe6      	SUBI R30,LOW(-_modoCuatro)
0000fc 4ffe      	SBCI R31,HIGH(-_modoCuatro)
0000fd 01df      	MOVW R26,R30
0000fe 27ee      	CLR  R30
0000ff 0da6      	ADD  R26,R6
000100 1fbe      	ADC  R27,R30
000101 907c      	LD   R7,X
                 ; 0000 00D9 repetir++;
000102 9483      	INC  R8
                 ; 0000 00DA if (repetir == 60){
000103 e3ec      	LDI  R30,LOW(60)
000104 15e8      	CP   R30,R8
000105 f411      	BRNE _0x17
                 ; 0000 00DB repetir = 0;
000106 2488      	CLR  R8
                 ; 0000 00DC numero++;
000107 9493      	INC  R9
                 ; 0000 00DD }
                 ; 0000 00DE 
                 ; 0000 00DF if (numero == 10) {
                 _0x17:
000108 e0ea      	LDI  R30,LOW(10)
000109 15e9      	CP   R30,R9
00010a f419      	BRNE _0x18
                 ; 0000 00E0 puede_cambiar = 1;
00010b 9468      	SET
00010c f820      	BLD  R2,0
                 ; 0000 00E1 numero = 0;
00010d 2499      	CLR  R9
                 ; 0000 00E2 }
                 ; 0000 00E3 }
                 _0x18:
                 _0xC:
                 ; 0000 00E4 
                 ; 0000 00E5 // Contador de anillo
                 ; 0000 00E6 switch (columnas){
00010e 2de4      	MOV  R30,R4
00010f e0f0      	LDI  R31,0
                 ; 0000 00E7 case 0x01:
000110 d047      	RCALL SUBOPT_0x1
000111 f411      	BRNE _0x1C
                 ; 0000 00E8 columnas = 0x02;
000112 e0e2      	LDI  R30,LOW(2)
000113 c011      	RJMP _0x30
                 ; 0000 00E9 break;
                 ; 0000 00EA 
                 ; 0000 00EB case 0x02:
                 _0x1C:
000114 d053      	RCALL SUBOPT_0x3
000115 f411      	BRNE _0x1D
                 ; 0000 00EC columnas = 0x04;
000116 e0e4      	LDI  R30,LOW(4)
000117 c00d      	RJMP _0x30
                 ; 0000 00ED break;
                 ; 0000 00EE 
                 ; 0000 00EF case 0x04:
                 _0x1D:
000118 30e4      	CPI  R30,LOW(0x4)
000119 e0a0      	LDI  R26,HIGH(0x4)
00011a 07fa      	CPC  R31,R26
00011b f411      	BRNE _0x1E
                 ; 0000 00F0 columnas = 0x08;
00011c e0e8      	LDI  R30,LOW(8)
00011d c007      	RJMP _0x30
                 ; 0000 00F1 break;
                 ; 0000 00F2 
                 ; 0000 00F3 case 0x08:
                 _0x1E:
00011e 30e8      	CPI  R30,LOW(0x8)
00011f e0a0      	LDI  R26,HIGH(0x8)
000120 07fa      	CPC  R31,R26
000121 f411      	BRNE _0x20
                 ; 0000 00F4 columnas = 0x10;
000122 e1e0      	LDI  R30,LOW(16)
000123 c001      	RJMP _0x30
                 ; 0000 00F5 break;
                 ; 0000 00F6 
                 ; 0000 00F7 default:
                 _0x20:
                 ; 0000 00F8 columnas = 0x01;
000124 e0e1      	LDI  R30,LOW(1)
                 _0x30:
000125 2e4e      	MOV  R4,R30
                 ; 0000 00F9 }
                 ; 0000 00FA 
                 ; 0000 00FB // Indice
                 ; 0000 00FC indice++;
000126 9463      	INC  R6
                 ; 0000 00FD if (indice == 5) {
000127 e0e5      	LDI  R30,LOW(5)
000128 15e6      	CP   R30,R6
000129 f411      	BRNE _0x21
                 ; 0000 00FE indice = 0;
00012a 2466      	CLR  R6
                 ; 0000 00FF cambio_caso++;
00012b 94a3      	INC  R10
                 ; 0000 0100 }
                 ; 0000 0101 
                 ; 0000 0102 switch (modo){
                 _0x21:
00012c 2de5      	MOV  R30,R5
00012d e0f0      	LDI  R31,0
                 ; 0000 0103 case 0:
00012e 9730      	SBIW R30,0
00012f f429      	BRNE _0x25
                 ; 0000 0104 if (cambio_caso == 4) cambiar_modo();
000130 e0e4      	LDI  R30,LOW(4)
000131 15ea      	CP   R30,R10
000132 f409      	BRNE _0x26
000133 df51      	RCALL _cambiar_modo
                 ; 0000 0105 break;
                 _0x26:
000134 c019      	RJMP _0x24
                 ; 0000 0106 
                 ; 0000 0107 case 1:
                 _0x25:
000135 d022      	RCALL SUBOPT_0x1
000136 f429      	BRNE _0x27
                 ; 0000 0108 if (cambio_caso == 50) cambiar_modo();
000137 e3e2      	LDI  R30,LOW(50)
000138 15ea      	CP   R30,R10
000139 f409      	BRNE _0x28
00013a df4a      	RCALL _cambiar_modo
                 ; 0000 0109 break;
                 _0x28:
00013b c012      	RJMP _0x24
                 ; 0000 010A 
                 ; 0000 010B case 2:
                 _0x27:
00013c d02b      	RCALL SUBOPT_0x3
00013d f429      	BRNE _0x29
                 ; 0000 010C if (cambio_caso == 50) cambiar_modo();
00013e e3e2      	LDI  R30,LOW(50)
00013f 15ea      	CP   R30,R10
000140 f409      	BRNE _0x2A
000141 df43      	RCALL _cambiar_modo
                 ; 0000 010D break;
                 _0x2A:
000142 c00b      	RJMP _0x24
                 ; 0000 010E 
                 ; 0000 010F case 3:
                 _0x29:
000143 30e3      	CPI  R30,LOW(0x3)
000144 e0a0      	LDI  R26,HIGH(0x3)
000145 07fa      	CPC  R31,R26
000146 f429      	BRNE _0x2D
                 ; 0000 0110 if (cambio_caso == 5) cambiar_modo();
000147 e0e5      	LDI  R30,LOW(5)
000148 15ea      	CP   R30,R10
000149 f409      	BRNE _0x2C
00014a df3a      	RCALL _cambiar_modo
                 ; 0000 0111 break;
                 _0x2C:
00014b c002      	RJMP _0x24
                 ; 0000 0112 
                 ; 0000 0113 default:
                 _0x2D:
                 ; 0000 0114 if (puede_cambiar) cambiar_modo();
00014c fc20      	SBRC R2,0
00014d df37      	RCALL _cambiar_modo
                 ; 0000 0115 }
                 _0x24:
                 ; 0000 0116 
                 ; 0000 0117 PORTC = columnas;
00014e ba45      	OUT  0x15,R4
                 ; 0000 0118 PORTD = filas;
00014f ba72      	OUT  0x12,R7
                 ; 0000 0119 delay_ms(10);
000150 e0aa      	LDI  R26,LOW(10)
000151 e0b0      	LDI  R27,0
000152 d019      	RCALL _delay_ms
                 ; 0000 011A }
000153 cf6b      	RJMP _0x7
                 ; 0000 011B }
                 _0x2F:
000154 cfff      	RJMP _0x2F
                 ; .FEND
                 
                 	.DSEG
                 _modoCero:
0000e0           	.BYTE 0x7
                 _modoUno:
0000e7           	.BYTE 0x23
                 _modoCuatro:
00010a           	.BYTE 0x32
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000155 95e0      	COM  R30
000156 2e7e      	MOV  R7,R30
000157 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000158 30e1      	CPI  R30,LOW(0x1)
000159 e0a0      	LDI  R26,HIGH(0x1)
00015a 07fa      	CPC  R31,R26
00015b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x2:
00015c 2deb      	MOV  R30,R11
00015d e0a5      	LDI  R26,LOW(5)
00015e 9fea      	MUL  R30,R26
00015f 01f0      	MOVW R30,R0
000160 51e9      	SUBI R30,LOW(-_modoUno)
000161 4fff      	SBCI R31,HIGH(-_modoUno)
000162 01df      	MOVW R26,R30
000163 27ee      	CLR  R30
000164 0da6      	ADD  R26,R6
000165 1fbe      	ADC  R27,R30
000166 91ec      	LD   R30,X
000167 cfed      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000168 30e2      	CPI  R30,LOW(0x2)
000169 e0a0      	LDI  R26,HIGH(0x2)
00016a 07fa      	CPC  R31,R26
00016b 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
00016c 9610      	adiw r26,0
00016d f039      	breq __delay_ms1
                 __delay_ms0:
00016e 95a8      	wdr
                +
00016f ef8a     +LDI R24 , LOW ( 0xFA )
000170 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000171 9701     +SBIW R24 , 1
000172 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000173 9711      	sbiw r26,1
000174 f7c9      	brne __delay_ms0
                 __delay_ms1:
000175 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   6 r1 :   1 r2 :   3 r3 :   0 r4 :   4 r5 :   5 r6 :   7 r7 :   3 
r8 :  10 r9 :   5 r10:   6 r11:  11 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  28 r27:   7 r28:   1 r29:   1 r30: 122 r31:  16 
x  :   5 y  :   0 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  30 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  18 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   1 cp    :  13 
cpc   :   6 cpi   :   6 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :  10 ld    :   3 ldd   :   0 ldi   :  60 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   9 movw  :   7 mul   :   2 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  42 
pop   :   0 push  :   0 rcall :  18 ret   :   5 reti  :   0 rjmp  :  38 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 
sts   :   0 sub   :   0 subi  :   3 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 32 out of 114 (28.1%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ec    612    136    748    8192   9.1%
[.dseg] 0x000060 0x00013c      0     92     92     512  18.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
