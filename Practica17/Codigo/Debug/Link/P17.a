;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void cambiar_modo(){
; 0000 003C void cambiar_modo(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003D cambio_caso = 0;
;PCODE: $0000000F VOL: 0
; 0000 003E indice = 0;
;PCODE: $00000010 VOL: 0
; 0000 003F renglon = 0;
;PCODE: $00000011 VOL: 0
; 0000 0040 numero = 0;
;PCODE: $00000012 VOL: 0
; 0000 0041 repetir = 0;
;PCODE: $00000013 VOL: 0
; 0000 0042 columnas = 0x01;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0043 modo++;
;PCODE: $00000016 VOL: 0
; 0000 0044 puede_cambiar = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0045 if (modo == 5) modo = 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0046 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;void main(void)
; 0000 0049 {
;PCODE: $00000021 VOL: 0
; 0000 004A // Declare your local variables here
; 0000 004B 
; 0000 004C // Input/Output Ports initialization
; 0000 004D // Port A initialization
; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0050 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0051 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0052 
; 0000 0053 // Port B initialization
; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0055 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0056 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0057 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0058 
; 0000 0059 // Port C initialization
; 0000 005A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 005B DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 005D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005E 
; 0000 005F // Port D initialization
; 0000 0060 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0061 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0062 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0063 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0064 
; 0000 0065 // Timer/Counter 0 initialization
; 0000 0066 // Clock source: System Clock
; 0000 0067 // Clock value: Timer 0 Stopped
; 0000 0068 // Mode: Normal top=0xFF
; 0000 0069 // OC0 output: Disconnected
; 0000 006A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 006B TCNT0=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006C OCR0=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006D 
; 0000 006E // Timer/Counter 1 initialization
; 0000 006F // Clock source: System Clock
; 0000 0070 // Clock value: Timer1 Stopped
; 0000 0071 // Mode: Normal top=0xFFFF
; 0000 0072 // OC1A output: Disconnected
; 0000 0073 // OC1B output: Disconnected
; 0000 0074 // Noise Canceler: Off
; 0000 0075 // Input Capture on Falling Edge
; 0000 0076 // Timer1 Overflow Interrupt: Off
; 0000 0077 // Input Capture Interrupt: Off
; 0000 0078 // Compare A Match Interrupt: Off
; 0000 0079 // Compare B Match Interrupt: Off
; 0000 007A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 007B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 007C TCNT1H=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007D TCNT1L=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007E ICR1H=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 007F ICR1L=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0080 OCR1AH=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0081 OCR1AL=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0082 OCR1BH=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0083 OCR1BL=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0084 
; 0000 0085 // Timer/Counter 2 initialization
; 0000 0086 // Clock source: System Clock
; 0000 0087 // Clock value: Timer2 Stopped
; 0000 0088 // Mode: Normal top=0xFF
; 0000 0089 // OC2 output: Disconnected
; 0000 008A ASSR=0<<AS2;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 008B TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008C TCNT2=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008D OCR2=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008E 
; 0000 008F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0090 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0091 
; 0000 0092 // External Interrupt(s) initialization
; 0000 0093 // INT0: Off
; 0000 0094 // INT1: Off
; 0000 0095 // INT2: Off
; 0000 0096 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0097 MCUCSR=(0<<ISC2);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0098 
; 0000 0099 // USART initialization
; 0000 009A // USART disabled
; 0000 009B UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 009C 
; 0000 009D // Analog Comparator initialization
; 0000 009E // Analog Comparator: Off
; 0000 009F // The Analog Comparator's positive input is
; 0000 00A0 // connected to the AIN0 pin
; 0000 00A1 // The Analog Comparator's negative input is
; 0000 00A2 // connected to the AIN1 pin
; 0000 00A3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A4 SFIOR=(0<<ACME);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00A5 
; 0000 00A6 // ADC initialization
; 0000 00A7 // ADC disabled
; 0000 00A8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A9 
; 0000 00AA // SPI initialization
; 0000 00AB // SPI disabled
; 0000 00AC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00AD 
; 0000 00AE // TWI initialization
; 0000 00AF // TWI disabled
; 0000 00B0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00B1 
; 0000 00B2 while (1)
;PCODE: $00000066 VOL: 0
; 0000 00B3 {
; 0000 00B4 switch (modo){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00B5 case 0:
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00B6 filas = ~modoCero[indice];
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B7 delay_ms(100);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00B8 break;
;PCODE: $00000074 VOL: 0
; 0000 00B9 
; 0000 00BA case 1:
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BB filas = ~modoUno[renglon][indice];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00BC repetir++;
;PCODE: $00000082 VOL: 0
; 0000 00BD if (repetir == 5){
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00BE renglon++;
;PCODE: $00000086 VOL: 0
; 0000 00BF repetir = 0;
;PCODE: $00000087 VOL: 0
; 0000 00C0 }
; 0000 00C1 
; 0000 00C2 if (renglon == 7) renglon = 0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C3 break;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C4 
; 0000 00C5 case 2:
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C6 filas = ~modoUno[renglon][indice];
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00C7 renglon++;
;PCODE: $0000009C VOL: 0
; 0000 00C8 if (renglon == 7) renglon = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C9 break;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00CA 
; 0000 00CB case 3:
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CC filas = ~modoUno[renglon][indice];
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CD delay_ms(100);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00CE repetir++;
;PCODE: $000000B3 VOL: 0
; 0000 00CF if (repetir == 5){
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D0 renglon++;
;PCODE: $000000B7 VOL: 0
; 0000 00D1 repetir = 0;
;PCODE: $000000B8 VOL: 0
; 0000 00D2 }
; 0000 00D3 
; 0000 00D4 if (renglon == 7) renglon = 0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00D5 break;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D6 
; 0000 00D7 default:
;PCODE: $000000C0 VOL: 0
; 0000 00D8 filas = modoCuatro[numero][indice];
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D9 repetir++;
;PCODE: $000000C8 VOL: 0
; 0000 00DA if (repetir == 60){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00DB repetir = 0;
;PCODE: $000000CC VOL: 0
; 0000 00DC numero++;
;PCODE: $000000CD VOL: 0
; 0000 00DD }
; 0000 00DE 
; 0000 00DF if (numero == 10) {
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E0 puede_cambiar = 1;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00E1 numero = 0;
;PCODE: $000000D5 VOL: 0
; 0000 00E2 }
; 0000 00E3 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00E4 
; 0000 00E5 // Contador de anillo
; 0000 00E6 switch (columnas){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00E7 case 0x01:
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E8 columnas = 0x02;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00E9 break;
;PCODE: $000000DF VOL: 0
; 0000 00EA 
; 0000 00EB case 0x02:
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00EC columnas = 0x04;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00ED break;
;PCODE: $000000E6 VOL: 0
; 0000 00EE 
; 0000 00EF case 0x04:
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00F0 columnas = 0x08;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F1 break;
;PCODE: $000000ED VOL: 0
; 0000 00F2 
; 0000 00F3 case 0x08:
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00F4 columnas = 0x10;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F5 break;
;PCODE: $000000F4 VOL: 0
; 0000 00F6 
; 0000 00F7 default:
;PCODE: $000000F5 VOL: 0
; 0000 00F8 columnas = 0x01;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00F9 }
;PCODE: $000000F8 VOL: 0
; 0000 00FA 
; 0000 00FB // Indice
; 0000 00FC indice++;
;PCODE: $000000F9 VOL: 0
; 0000 00FD if (indice == 5) {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00FE indice = 0;
;PCODE: $000000FD VOL: 0
; 0000 00FF cambio_caso++;
;PCODE: $000000FE VOL: 0
; 0000 0100 }
; 0000 0101 
; 0000 0102 switch (modo){
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0103 case 0:
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0104 if (cambio_caso == 4) cambiar_modo();
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0105 break;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0106 
; 0000 0107 case 1:
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0108 if (cambio_caso == 50) cambiar_modo();
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0109 break;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 010A 
; 0000 010B case 2:
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 010C if (cambio_caso == 50) cambiar_modo();
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 010D break;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 010E 
; 0000 010F case 3:
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0110 if (cambio_caso == 5) cambiar_modo();
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0111 break;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0112 
; 0000 0113 default:
;PCODE: $00000128 VOL: 0
; 0000 0114 if (puede_cambiar) cambiar_modo();
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0115 }
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0116 
; 0000 0117 PORTC = columnas;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0118 PORTD = filas;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0119 delay_ms(10);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 011A }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 011B }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
